# Para cada cópia dos livros eu deveria gerar uma ID específica
para identificar qual cópia foi emprestada. Tavlez em:

def create_book():
    id =  str(uuid.uuid4()) # Mude isso de lugar, daqui
    ...
    ...
    publish_year = None
    copies_available = None
    is_loaned = None
    id = None # Para cá!

    numeric_input_prompts = [
        ('Ano de publicação do livro', 'publish_year'),
        ('Cópias em Estoque', 'copies_available'),
        ('Cópias disponíveis para EMPRÉSTIMO', 'is_loaned')
        ('ID', 'id')
    ]
# E passo uma ID diferente para CADA cópia, se tiverem 10 Cópias
então terão 10 IDs





#4 Registrar Devolução
#5 Consultar Livro
#6 Gerar Relatório

#7 Should I create a separte module just for the errors?




'''
Problema de acentuação no JSON
https://pt.stackoverflow.com/questions/67604/encoding-utf-8-permite-acentos

Quando uso somente o utf-8 os acentos ficam corrompidos também

I am using tuf-8 with BOM encoding='utf-8-sig' while my code editor is utf-8, 
the new values (book) has the correct accents, but the old values get corrupted

Funcionou somente 1 vez:
Utilizar UTF=8 with BOM: encoding='utf-8-sig'
Parâmetro: ensure_ascii=False

Me ajude a polir mais a explicação do meu commit

##CODIGO ANTIGO - NÃO FUNCIONAL

    import json
    #Pegar os dados do storage
    def fetch_storage_data():
        with open('D:/Projects/Python-studies/ampli_university_snipets/library_system/storage.json', 'r') as f:
            return json.load(f)


##CÓDIGO ATUAL - FUNCIONAL

    import json
    import os

    #Pegar os dados do storage
    def fetch_storage_data():
        file_path = 'D:/Projects/Python-studies/ampli_university_snipets/library_system/storage.json'    
        
        if not os.path.exists(file_path):
            raise FileNotFoundError(f"File '{file_path}' not found.")
        
        try:
            with open(file_path, 'r', encoding='utf-8-sig') as f:
                return json.load(f)
        except json.decoder.JSONDecodeError as e:
            print("Error decoding JSON:", e)
            # Optionally, print the file content to see what's causing the error
            with open(file_path, 'r', encoding='utf-8-sig') as f:
                print("File content:", f.read())
            raise

    adicionei:
    1. O modulo "os"
    2. o tratamento de erro "FileNotFoundError" juntamente com "try" e "except"
    3. prints para melhor entendimento de possíveis erros
    4. comentários para melhor legibilidade do código


'''

